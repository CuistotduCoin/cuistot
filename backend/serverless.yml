service: cuistot-service

frameworkVersion: ">=1.21.0 <2.0.0"

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${env:NODE_ENV}
  region: ${env:AWS_REGION_IRELAND}
  profile: default

plugins:
  - serverless-appsync-plugin
  - serverless-dotenv-plugin
  - serverless-offline
  - serverless-webpack

custom:
  webpack:
    includeModules:
      forceInclude:
        - pg
    packager: 'yarn' # Packager that will be used to package your external modules
  dotenv:
    path: .env
  accountId: ${env:AWS_ACCOUNT_ID}
  appSync:
    name: cuistot-appsync-${self:provider.stage}
    authenticationType: API_KEY
    userPoolConfig:
      awsRegion: ${env:AWS_REGION_LONDON}
      defaultAction: ALLOW
      userPoolId: ${env:AWS_USERPOOL_ID}
    region: ${env:AWS_REGION_IRELAND}
    mappingTemplates:
      # Mutation mapping templates
      - dataSource: Lambda
        type: Mutation
        field: createWorkshop
        request: "workshop/createWorkshop-request-mapping-template.txt"
        response: "workshop/createWorkshop-response-mapping-template.txt"
      - dataSource: Lambda
        type: Mutation
        field: updateWorkshop
        request: "workshop/updateWorkshop-request-mapping-template.txt"
        response: "workshop/updateWorkshop-response-mapping-template.txt"
      - dataSource: Lambda
        type: Mutation
        field: deleteWorkshop
        request: "workshop/deleteWorkshop-request-mapping-template.txt"
        response: "workshop/deleteWorkshop-response-mapping-template.txt"
      # Query mapping templates
      - dataSource: Lambda
        type: Query
        field: getWorkshop
        request: "workshop/getWorkshop-request-mapping-template.txt"
        response: "workshop/getWorkshop-response-mapping-template.txt"
      - dataSource: Lambda
        type: Query
        field: getWorkshops
        request: "workshop/getWorkshops-request-mapping-template.txt"
        response: "workshop/getWorkshops-response-mapping-template.txt"
      - dataSource: Lambda
        type: Query
        field: getGourmet
        request: "gourmet/getGourmet-request-mapping-template.txt"
        response: "gourmet/getGourmet-response-mapping-template.txt"
      - dataSource: Lambda
        type: Query
        field: getCook
        request: "cook/getCook-request-mapping-template.txt"
        response: "cook/getCook-response-mapping-template.txt"
      - dataSource: Lambda
        type: Query
        field: getKitchen
        request: "kitchen/getKitchen-request-mapping-template.txt"
        response: "kitchen/getKitchen-response-mapping-template.txt"
      - dataSource: Lambda
        type: Query
        field: getBooking
        request: "booking/getBooking-request-mapping-template.txt"
        response: "booking/getBooking-response-mapping-template.txt"
      - dataSource: Lambda
        type: Query
        field: getEvaluation
        request: "evaluation/getEvaluation-request-mapping-template.txt"
        response: "evaluation/getEvaluation-response-mapping-template.txt"
      - dataSource: Lambda
        type: Query
        field: getCurrentGourmet
        request: "getCurrentGourmet-request-mapping-template.txt"
        response: "getCurrentGourmet-response-mapping-template.txt"
    serviceRole: "AppSyncServiceRole"
    dataSources:
      - type: AWS_LAMBDA
        name: Lambda
        description: 'Lambda DataSource'
        config:
          lambdaFunctionArn: "arn:aws:lambda:${self:custom.appSync.region}:${self:custom.accountId}:function:${self:service}-${self:provider.stage}-graphql"
          serviceRoleArn: "arn:aws:iam::${self:custom.accountId}:role/Lambda-${self:custom.appSync.serviceRole}-${self:provider.stage}"

functions:
  graphql:
    handler: handler.graphqlHandler

resources:
  Resources:
    AppSyncServiceRole:
      Type: "AWS::IAM::Role"
      DeletionPolicy : "Delete"
      Properties:
        RoleName: "Lambda-${self:custom.appSync.serviceRole}-${self:provider.stage}"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Principal:
                Service:
                  - "appsync.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          -
            PolicyName: "Lambda-${self:custom.appSync.serviceRole}-${self:provider.stage}-Policy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Action:
                    - "lambda:invokeFunction"
                  Resource:
                    - "arn:aws:lambda:${self:custom.appSync.region}:*:function:${self:service}-${self:provider.stage}-graphql"
                    - "arn:aws:lambda:${self:custom.appSync.region}:*:function:${self:service}-${self:provider.stage}-graphql:*"
