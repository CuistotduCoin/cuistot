service: serverless-graphql-appsync

frameworkVersion: ">=1.21.0 <2.0.0"

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: ${env:AWS_REGION_PARIS}

plugins:
  - serverless-appsync-plugin
  - serverless-dotenv-plugin
  - serverless-dynamodb-local
  - serverless-offline

custom:
  dotenv:
    path: .env
  accountId: ${env:AWS_ACCOUNT_ID} # replace this with your accountId
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
    seed:
      test:
        sources:
          - table: Gourmet
            sources: [seed-data/Gourmet.json]
          - table: Cook
            sources: [seed-data/Cook.json]
          - table: Kitchen
            sources: [seed-data/Kitchen.json]
          - table: Workshop
            sources: [seed-data/Workshop.json]
          - table: Reservation
            sources: [seed-data/Reservation.json]
  appSync:
    # name:  # defaults to api
    # apiId # only required for update-appsync
    authenticationType: AMAZON_COGNITO_USER_POOLS # API_KEY is also supported
    userPoolConfig:
      awsRegion: ${env:AWS_REGION_LONDON} # required # region
      defaultAction: ALLOW
      userPoolId: ${env:AWS_USERPOOL_ID} # replace this with your Cognito User Pool Id
    # region: # defaults to provider region
    # mappingTemplatesLocation: # defaults to mapping-templates
    mappingTemplates:
      - dataSource: Workshop
        type: Mutation
        field: createWorkshop
        request: "createWorkshop-request-mapping-template.txt"
        response: "createWorkshop-response-mapping-template.txt"
      - dataSource: Workshop
        type: Query
        field: getWorkshop
        request: "getWorkshop-request-mapping-template.txt"
        response: "getWorkshop-response-mapping-template.txt"
      - dataSource: Workshop
        type: Mutation
        field: updateWorkshop
        request: "updateWorkshop-request-mapping-template.txt"
        response: "updateWorkshop-response-mapping-template.txt"
      - dataSource: Workshop
        type: Mutation
        field: deleteWorkshop
        request: "deleteWorkshop-request-mapping-template.txt"
        response: "deleteWorkshop-response-mapping-template.txt"
    # schema: # defaults schema.graphql
    serviceRole: "AppSyncServiceRole"
    dataSources:
      - type: AMAZON_DYNAMODB
        name: Gourmet
        description: 'Gourmet table'
        config:
          tableName: 'Gourmet'
          serviceRoleArn: "arn:aws:iam::${self:custom.accountId}:role/Dynamo-${self:custom.appSync.serviceRole}"
      - type: AMAZON_DYNAMODB
        name: Cook
        description: 'Cook table'
        config:
          tableName: 'Cook'
          serviceRoleArn: "arn:aws:iam::${self:custom.accountId}:role/Dynamo-${self:custom.appSync.serviceRole}"
      - type: AMAZON_DYNAMODB
        name: Kitchen
        description: 'Kitchen table'
        config:
          tableName: 'Kitchen'
          serviceRoleArn: "arn:aws:iam::${self:custom.accountId}:role/Dynamo-${self:custom.appSync.serviceRole}"
      - type: AMAZON_DYNAMODB
        name: Workshop
        description: 'Workshop table'
        config:
          tableName: 'Workshop'
          serviceRoleArn: "arn:aws:iam::${self:custom.accountId}:role/Dynamo-${self:custom.appSync.serviceRole}"
      - type: AMAZON_DYNAMODB
        name: Reservation
        description: 'Reservation table'
        config:
          tableName: 'Reservation'
          serviceRoleArn: "arn:aws:iam::${self:custom.accountId}:role/Dynamo-${self:custom.appSync.serviceRole}"

resources:
  Resources:
    # Gourmet
    GourmetTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: "Gourmet"
        KeySchema:
          -
            AttributeName: gourmet_id   
            KeyType: HASH
        AttributeDefinitions:
          -
            AttributeName: gourmet_id
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 10
    # Cook
    CookTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: "Cook"
        KeySchema:
          -
            AttributeName: cook_id
            KeyType: HASH
        AttributeDefinitions:
          -
            AttributeName: cook_id
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 10
    # Kitchen
    KitchenTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: "Kitchen"
        KeySchema:
          -
            AttributeName: kitchen_id
            KeyType: HASH
        AttributeDefinitions:
          -
            AttributeName: kitchen_id
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 10
    # Workshop
    WorkshopTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: "Workshop"
        KeySchema:
          -
            AttributeName: workshop_id
            KeyType: HASH
        AttributeDefinitions:
          -
            AttributeName: workshop_id
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 10
    # Reservation
    ReservationTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: "Reservation"
        KeySchema:
          -
            AttributeName: gourmet_id
            KeyType: HASH
        AttributeDefinitions:
          -
            AttributeName: gourmet_id
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 10
    # End Tables / Start AppSync
    AppSyncServiceRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: "Dynamo-AppSyncServiceRole"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Principal:
                Service:
                  - "appsync.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          -
            PolicyName: "Dynamo-AppSyncServiceRole-Policy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Action:
                    - "dynamodb:Query"
                    - "dynamodb:BatchWriteItem"
                    - "dynamodb:GetItem"
                    - "dynamodb:DeleteItem"
                    - "dynamodb:PutItem"
                    - "dynamodb:Scan"
                    - "dynamodb:UpdateItem"
                  Resource:
                    - "arn:aws:dynamodb:${env:AWS_REGION_PARIS}:*:table/Gourmet"
                    - "arn:aws:dynamodb:${env:AWS_REGION_PARIS}:*:table/Gourmet/*"
                    - "arn:aws:dynamodb:${env:AWS_REGION_PARIS}:*:table/Cook"
                    - "arn:aws:dynamodb:${env:AWS_REGION_PARIS}:*:table/Cook/*"
                    - "arn:aws:dynamodb:${env:AWS_REGION_PARIS}:*:table/Kitchen"
                    - "arn:aws:dynamodb:${env:AWS_REGION_PARIS}:*:table/Kitchen/*"
                    - "arn:aws:dynamodb:${env:AWS_REGION_PARIS}:*:table/Workshop"
                    - "arn:aws:dynamodb:${env:AWS_REGION_PARIS}:*:table/Workshop/*"
                    - "arn:aws:dynamodb:${env:AWS_REGION_PARIS}:*:table/Reservation"
                    - "arn:aws:dynamodb:${env:AWS_REGION_PARIS}:*:table/Reservation/*"