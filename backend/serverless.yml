service: cuistot-service

frameworkVersion: ">=1.21.0 <2.0.0"

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${{opt:stage,'development'}}
  region: eu-west-1
  variableSyntax: "\\${{([ ~:a-zA-Z0-9._\\'\",\\-\\/\\(\\)]+?)}}" # https://serverless.com/framework/docs/providers/aws/guide/variables/#using-custom-variable-syntax
  environment:
    NODE_ENV: ${{self:provider.stage}}
    DATABASE_HOST: ${{ssm:/cuistot/database/host~true}}
    DATABASE_PORT: ${{ssm:/cuistot/database/port~true}}
    DATABASE_NAME: ${{ssm:/cuistot/database/name~true}}
    DATABASE_USERNAME: ${{ssm:/cuistot/database/username~true}}
    DATABASE_PASSWORD: ${{ssm:/cuistot/database/password~true}}
    AWS_USERPOOL_ID: ${{ssm:/cuistot/userpool-id~true}}
    AWS_STORE_BUCKET: ${{ssm:/cuistot/store-bucket~true}}
    AWS_ACCOUNT_ID: ${{ssm:/cuistot/account-id~true}}
    SLS_DEBUG: "*"

plugins:
  - serverless-appsync-plugin
  - serverless-webpack
  - serverless-stage-manager

package:
  individually: true

custom:
  stages:
    - development
    - staging
    - production
  webpack:
    includeModules:
      forceInclude:
        - pg
      forceExclude:
        - aws-sdk
    packager: 'yarn' # Packager that will be used to package your external modules
  accountId: ${{self:provider.environment.AWS_ACCOUNT_ID}}
  appSync:
    name: cuistot-appsync-${{self:provider.stage}}
    authenticationType: AMAZON_COGNITO_USER_POOLS
    userPoolConfig:
      awsRegion: ${{self:provider.region}}
      defaultAction: ALLOW
      userPoolId: ${{self:provider.environment.AWS_USERPOOL_ID}}
    logConfig:
      loggingRoleArn: "arn:aws:iam::${{self:custom.accountId}}:role/Logging-${{self:custom.appSync.serviceRole}}-${{self:provider.stage}}"
      level: ALL
    region: ${{self:provider.region}}
    mappingTemplates:
      # Mutation mapping templates
      - dataSource: Lambda
        type: Mutation
        field: createWorkshop
        request: "workshop/createWorkshop-request-mapping-template.txt"
        response: "workshop/createWorkshop-response-mapping-template.txt"
      - dataSource: Lambda
        type: Mutation
        field: updateWorkshop
        request: "workshop/updateWorkshop-request-mapping-template.txt"
        response: "workshop/updateWorkshop-response-mapping-template.txt"
      - dataSource: Lambda
        type: Mutation
        field: deleteWorkshop
        request: "workshop/deleteWorkshop-request-mapping-template.txt"
        response: "workshop/deleteWorkshop-response-mapping-template.txt"
      - dataSource: Lambda
        type: Mutation
        field: confirmWorkshop
        request: "workshop/confirmWorkshop-request-mapping-template.txt"
        response: "workshop/confirmWorkshop-response-mapping-template.txt"
      - dataSource: Lambda
        type: Mutation
        field: recreateWorkshop
        request: "workshop/recreateWorkshop-request-mapping-template.txt"
        response: "workshop/recreateWorkshop-response-mapping-template.txt"

      - dataSource: Lambda
        type: Mutation
        field: createBooking
        request: "booking/createBooking-request-mapping-template.txt"
        response: "booking/createBooking-response-mapping-template.txt"
      - dataSource: Lambda
        type: Mutation
        field: updateBooking
        request: "booking/updateBooking-request-mapping-template.txt"
        response: "booking/updateBooking-response-mapping-template.txt"
      - dataSource: Lambda
        type: Mutation
        field: deleteBooking
        request: "booking/deleteBooking-request-mapping-template.txt"
        response: "booking/deleteBooking-response-mapping-template.txt"
      - dataSource: Lambda
        type: Mutation
        field: recreateBooking
        request: "booking/recreateBooking-request-mapping-template.txt"
        response: "booking/recreateBooking-response-mapping-template.txt"

      - dataSource: Lambda
        type: Mutation
        field: createEvaluation
        request: "evaluation/createEvaluation-request-mapping-template.txt"
        response: "evaluation/createEvaluation-response-mapping-template.txt"
      - dataSource: Lambda
        type: Mutation
        field: updateEvaluation
        request: "evaluation/updateEvaluation-request-mapping-template.txt"
        response: "evaluation/updateEvaluation-response-mapping-template.txt"
      - dataSource: Lambda
        type: Mutation
        field: deleteEvaluation
        request: "evaluation/deleteEvaluation-request-mapping-template.txt"
        response: "evaluation/deleteEvaluation-response-mapping-template.txt"
      - dataSource: Lambda
        type: Mutation
        field: recreateEvaluation
        request: "evaluation/recreateEvaluation-request-mapping-template.txt"
        response: "evaluation/recreateEvaluation-response-mapping-template.txt"

      - dataSource: Lambda
        type: Mutation
        field: createGourmet
        request: "gourmet/createGourmet-request-mapping-template.txt"
        response: "gourmet/createGourmet-response-mapping-template.txt"
      - dataSource: Lambda
        type: Mutation
        field: updateGourmet
        request: "gourmet/updateGourmet-request-mapping-template.txt"
        response: "gourmet/updateGourmet-response-mapping-template.txt"
      - dataSource: Lambda
        type: Mutation
        field: deleteGourmet
        request: "gourmet/deleteGourmet-request-mapping-template.txt"
        response: "gourmet/deleteGourmet-response-mapping-template.txt"
      - dataSource: Lambda
        type: Mutation
        field: recreateGourmet
        request: "gourmet/recreateGourmet-request-mapping-template.txt"
        response: "gourmet/recreateGourmet-response-mapping-template.txt"

      - dataSource: Lambda
        type: Mutation
        field: createCook
        request: "cook/createCook-request-mapping-template.txt"
        response: "cook/createCook-response-mapping-template.txt"
      - dataSource: Lambda
        type: Mutation
        field: updateCook
        request: "cook/updateCook-request-mapping-template.txt"
        response: "cook/updateCook-response-mapping-template.txt"
      - dataSource: Lambda
        type: Mutation
        field: confirmCook
        request: "cook/confirmCook-request-mapping-template.txt"
        response: "cook/confirmCook-response-mapping-template.txt"
      - dataSource: Lambda
        type: Mutation
        field: deleteCook
        request: "cook/deleteCook-request-mapping-template.txt"
        response: "cook/deleteCook-response-mapping-template.txt"
      - dataSource: Lambda
        type: Mutation
        field: recreateCook
        request: "cook/recreateCook-request-mapping-template.txt"
        response: "cook/recreateCook-response-mapping-template.txt"

      - dataSource: Lambda
        type: Mutation
        field: createKitchen
        request: "kitchen/createKitchen-request-mapping-template.txt"
        response: "kitchen/createKitchen-response-mapping-template.txt"
      - dataSource: Lambda
        type: Mutation
        field: updateKitchen
        request: "kitchen/updateKitchen-request-mapping-template.txt"
        response: "kitchen/updateKitchen-response-mapping-template.txt"
      - dataSource: Lambda
        type: Mutation
        field: deleteKitchen
        request: "kitchen/deleteKitchen-request-mapping-template.txt"
        response: "kitchen/deleteKitchen-response-mapping-template.txt"
      - dataSource: Lambda
        type: Mutation
        field: recreateKitchen
        request: "kitchen/recreateKitchen-request-mapping-template.txt"
        response: "kitchen/recreateKitchen-response-mapping-template.txt"

      # Query mapping templates
      - dataSource: Lambda
        type: Query
        field: getWorkshop
        request: "workshop/getWorkshop-request-mapping-template.txt"
        response: "workshop/getWorkshop-response-mapping-template.txt"
      - dataSource: Lambda
        type: Query
        field: getWorkshops
        request: "workshop/getWorkshops-request-mapping-template.txt"
        response: "workshop/getWorkshops-response-mapping-template.txt"
      - dataSource: Lambda
        type: Query
        field: getWorkshopsPage
        request: "workshop/getWorkshops-request-mapping-template.txt"
        response: "workshop/getWorkshops-response-mapping-template.txt"
      - dataSource: Lambda
        type: Query
        field: getGourmet
        request: "gourmet/getGourmet-request-mapping-template.txt"
        response: "gourmet/getGourmet-response-mapping-template.txt"
      - dataSource: Lambda
        type: Query
        field: getGourmetsPage
        request: "gourmet/getGourmets-request-mapping-template.txt"
        response: "gourmet/getGourmets-response-mapping-template.txt"
      - dataSource: Lambda
        type: Query
        field: getCook
        request: "cook/getCook-request-mapping-template.txt"
        response: "cook/getCook-response-mapping-template.txt"
      - dataSource: Lambda
        type: Query
        field: getCooksPage
        request: "cook/getCooks-request-mapping-template.txt"
        response: "cook/getCooks-response-mapping-template.txt"
      - dataSource: Lambda
        type: Query
        field: getKitchen
        request: "kitchen/getKitchen-request-mapping-template.txt"
        response: "kitchen/getKitchen-response-mapping-template.txt"
      - dataSource: Lambda
        type: Query
        field: getKitchens
        request: "kitchen/getKitchens-request-mapping-template.txt"
        response: "kitchen/getKitchens-response-mapping-template.txt"
      - dataSource: Lambda
        type: Query
        field: getKitchensPage
        request: "kitchen/getKitchens-request-mapping-template.txt"
        response: "kitchen/getKitchens-response-mapping-template.txt"
      - dataSource: Lambda
        type: Query
        field: getBooking
        request: "booking/getBooking-request-mapping-template.txt"
        response: "booking/getBooking-response-mapping-template.txt"
      - dataSource: Lambda
        type: Query
        field: getBookingsPage
        request: "booking/getBookings-request-mapping-template.txt"
        response: "booking/getBookings-response-mapping-template.txt"
      - dataSource: Lambda
        type: Query
        field: getEvaluation
        request: "evaluation/getEvaluation-request-mapping-template.txt"
        response: "evaluation/getEvaluation-response-mapping-template.txt"
      - dataSource: Lambda
        type: Query
        field: getEvaluationsPage
        request: "evaluation/getEvaluations-request-mapping-template.txt"
        response: "evaluation/getEvaluations-response-mapping-template.txt"
      - dataSource: Lambda
        type: Query
        field: getCurrentGourmet
        request: "getCurrentGourmet-request-mapping-template.txt"
        response: "getCurrentGourmet-response-mapping-template.txt"

      # Nested fields
      - dataSource: Lambda
        type: Cook
        field: gourmet
        request: "cook/cookGourmet-request-mapping-template.txt"
        response: "cook/cookGourmet-response-mapping-template.txt"
      - dataSource: Lambda
        type: Cook
        field: workshops
        request: "cook/cookWorkshops-request-mapping-template.txt"
        response: "cook/cookWorkshops-response-mapping-template.txt"
      - dataSource: Lambda
        type: Cook
        field: evaluations
        request: "cook/cookEvaluations-request-mapping-template.txt"
        response: "cook/cookEvaluations-response-mapping-template.txt"
      - dataSource: Lambda
        type: Workshop
        field: kitchen
        request: "workshop/workshopKitchen-request-mapping-template.txt"
        response: "workshop/workshopKitchen-response-mapping-template.txt"
      - dataSource: Lambda
        type: Workshop
        field: cook
        request: "workshop/workshopCook-request-mapping-template.txt"
        response: "workshop/workshopCook-response-mapping-template.txt"
      - dataSource: Lambda
        type: Workshop
        field: bookings
        request: "workshop/workshopBookings-request-mapping-template.txt"
        response: "workshop/workshopBookings-response-mapping-template.txt"
      - dataSource: Lambda
        type: Gourmet
        field: bookings
        request: "gourmet/gourmetBookings-request-mapping-template.txt"
        response: "gourmet/gourmetBookings-response-mapping-template.txt"
      - dataSource: Lambda
        type: Booking
        field: gourmet
        request: "booking/bookingGourmet-request-mapping-template.txt"
        response: "booking/bookingGourmet-response-mapping-template.txt"
      - dataSource: Lambda
        type: Booking
        field: workshop
        request: "booking/bookingWorkshop-request-mapping-template.txt"
        response: "booking/bookingWorkshop-response-mapping-template.txt"
      - dataSource: Lambda
        type: Evaluation
        field: cook
        request: "evaluation/evaluationCook-request-mapping-template.txt"
        response: "evaluation/evaluationCook-response-mapping-template.txt"
      - dataSource: Lambda
        type: Evaluation
        field: author
        request: "evaluation/evaluationAuthor-request-mapping-template.txt"
        response: "evaluation/evaluationAuthor-response-mapping-template.txt"
      - dataSource: Lambda
        type: Kitchen
        field: author
        request: "kitchen/kitchenAuthor-request-mapping-template.txt"
        response: "kitchen/kitchenAuthor-response-mapping-template.txt"
    serviceRole: "AppSyncServiceRole"
    dataSources:
      - type: AWS_LAMBDA
        name: Lambda
        description: 'Lambda DataSource'
        config:
          lambdaFunctionArn: "arn:aws:lambda:${{self:custom.appSync.region}}:${{self:custom.accountId}}:function:${{self:service}}-${{self:provider.stage}}-graphql"
          serviceRoleArn: "arn:aws:iam::${{self:custom.accountId}}:role/Lambda-${{self:custom.appSync.serviceRole}}-${{self:provider.stage}}"

functions:
  graphql:
    handler: handlers/graphql.handler
    role: GraphqlLambdaRole
  postConfirmation:
    handler: handlers/postConfirmation.handler
    role: PostConfirmationLambdaRole
  sendEmail:
    handler: handlers/sendEmail.handler
    role: SendEmailLambdaRole
  handleBucketPutEvent:
    handler: handlers/handleBucketPutEvent.handler
    role: HandleBucketPutEventLambdaRole
  handleBucketDeleteEvent:
    handler: handlers/handleBucketDeleteEvent.handler
    role: HandleBucketDeleteEventLambdaRole

resources:
  Parameters:
    PreExistingDBInstance:
      Type: String
      Default: true
    PreExistingUserPool:
      Type: String
      Default: true
  Conditions:
    NeedsNewDBInstance:
      Fn::Not:
        - Fn::Equals:
          - Ref: "PreExistingDBInstance"
          - true
    NeedsNewUserPool:
      Fn::Not:
        - Fn::Equals:
          - Ref: "PreExistingUserPool"
          - true
  Resources:
    DBInstance:
      Condition: NeedsNewDBInstance
      Type: "AWS::RDS::DBInstance"
      DeletionPolicy: "Retain"
      Properties:
        DBInstanceIdentifier: "cuistot-postgres-${{self:provider.stage}}"
        DBName: "cuistot_${{self:provider.stage}}"
        AllocatedStorage: "20"
        DBInstanceClass: "db.t2.micro"
        Engine: "postgres"
        EngineVersion: "9.6.6"
        MasterUsername: ${{self:provider.environment.DATABASE_USERNAME}}
        MasterUserPassword: ${{self:provider.environment.DATABASE_PASSWORD}}

    UserPool:
      Condition: NeedsNewUserPool
      Type: "AWS::Cognito::UserPool"
      DeletionPolicy: "Retain"
      Properties:
        UserPoolName: "cuistot-user-pool-${{self:provider.stage}}"
        AutoVerifiedAttributes:
          - email
        AliasAttributes:
          - email
        MfaConfiguration: "OFF"
        EmailVerificationSubject: "[Cuistot du Coin] Votre code de sécurité"
        EmailVerificationMessage:
          Fn::Sub:
            <p>Vous allez avoir besoin de ce code :&nbsp;{####}</p>
        LambdaConfig:
          PostConfirmation: "arn:aws:lambda:${{self:custom.appSync.region}}:${{self:custom.accountId}}:function:${{self:service}}-${{self:provider.stage}}-postConfirmation"
        Schema:
          - Name: name
            AttributeDataType: String
            Mutable: true
            Required: false
          - Name: email
            AttributeDataType: String
            Mutable: true
            Required: true
        Policies:
          PasswordPolicy:
            RequireLowercase: true
            RequireSymbols: false
            RequireNumbers: true
            MinimumLength: 8
            RequireUppercase: true
        AdminCreateUserConfig:
          InviteMessageTemplate:
            EmailMessage: "Bienvenue sur Cuistot du coin ! Voici vos identifiants de connexion (email / mot de passe) : {username} / {####}"
            EmailSubject: "Votre mot de passe temporaire. Pensez bien à le changer :)"
            SMSMessage: "Bienvenue sur Cuistot du coin ! Voici vos identifiants de connexion : {username} / {####}. Pensez bien à changer votre mot de passe :)"
          UnusedAccountValidityDays: 7
          AllowAdminCreateUserOnly: false
    UserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      DeletionPolicy: "Retain"
      Properties:
        ClientName: cuistot-app-client
        GenerateSecret: false
        RefreshTokenValidity: 7
        UserPoolId: ${{self:provider.environment.AWS_USERPOOL_ID}}
    AdminGroup:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        Description: "Admin group"
        GroupName: "Admin"
        Precedence: 1
        UserPoolId: ${{self:provider.environment.AWS_USERPOOL_ID}}
    GourmetGroup:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        Description: "Gourmets group"
        GroupName: "Gourmet"
        Precedence: 3
        UserPoolId: ${{self:provider.environment.AWS_USERPOOL_ID}}
    CookGroup:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        Description: "Cooks group"
        GroupName: "Cook"
        Precedence: 2
        UserPoolId: ${{self:provider.environment.AWS_USERPOOL_ID}}
    GuestGroup:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        Description: "Guests group"
        GroupName: "Guest"
        Precedence: 4
        UserPoolId: ${{self:provider.environment.AWS_USERPOOL_ID}}
    AdminUser:
      Type: AWS::Cognito::UserPoolUser
      Properties:
        UserAttributes:
          - Name: name
            Value: Admin
          - Name: email
            Value: stephane@cuistotducoin.com
        Username: admin
        UserPoolId: ${{self:provider.environment.AWS_USERPOOL_ID}}
    GourmetUser:
      Type: AWS::Cognito::UserPoolUser
      Properties:
        UserAttributes:
          - Name: name
            Value: Gourmet
          - Name: email
            Value: stephane@cuistotducoin.com
        Username: gourmet
        UserPoolId: ${{self:provider.environment.AWS_USERPOOL_ID}}
    CookUser:
      Type: AWS::Cognito::UserPoolUser
      Properties:
        UserAttributes:
          - Name: name
            Value: Cook
          - Name: email
            Value: stephane@cuistotducoin.com
        Username: cook
        UserPoolId: ${{self:provider.environment.AWS_USERPOOL_ID}}
    GuestUser:
      Type: AWS::Cognito::UserPoolUser
      Properties:
        UserAttributes:
          - Name: name
            Value: Guest
          - Name: email
            Value: stephane@cuistotducoin.com
        Username: guest
        UserPoolId: ${{self:provider.environment.AWS_USERPOOL_ID}}
    AddAdminToAdminGroup:
      DependsOn:
        - AdminUser
        - AdminGroup
      Type: AWS::Cognito::UserPoolUserToGroupAttachment
      Properties:
        GroupName: Admin
        Username: admin
        UserPoolId: ${{self:provider.environment.AWS_USERPOOL_ID}}
    AddGourmetToGourmetGroup:
      DependsOn:
        - GourmetUser
        - GourmetGroup
      Type: AWS::Cognito::UserPoolUserToGroupAttachment
      Properties:
        GroupName: Gourmet
        Username: gourmet
        UserPoolId: ${{self:provider.environment.AWS_USERPOOL_ID}}
    AddCookToCookGroup:
      DependsOn:
        - CookUser
        - CookGroup
      Type: AWS::Cognito::UserPoolUserToGroupAttachment
      Properties:
        GroupName: Cook
        Username: cook
        UserPoolId: ${{self:provider.environment.AWS_USERPOOL_ID}}
    AddGuestToGuestGroup:
      DependsOn:
        - GuestUser
        - GuestGroup
      Type: AWS::Cognito::UserPoolUserToGroupAttachment
      Properties:
        GroupName: Guest
        Username: guest
        UserPoolId: ${{self:provider.environment.AWS_USERPOOL_ID}}

    StoreBucket:
      Type: AWS::S3::Bucket
      DependsOn:
        - HandleBucketPutEventLambdaFunction
        - HandleBucketDeleteEventLambdaFunction
      Properties:
        AccessControl: BucketOwnerFullControl
        BucketName: ${{self:provider.environment.AWS_STORE_BUCKET}}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - '*'
              AllowedOrigins:
                - '*'
              ExposedHeaders:
                - 'x-amz-server-side-encryption'
                - 'x-amz-request-id'
                - 'x-amz-id-2'
              MaxAge: '3000'
              AllowedMethods:
                - HEAD
                - GET
                - PUT
                - POST
                - DELETE
        NotificationConfiguration:
          LambdaConfigurations:
            - Event: 's3:ObjectCreated:Put'
              Function: arn:aws:lambda:${{self:provider.region}}:${{self:custom.accountId}}:function:${{self:service}}-${{self:provider.stage}}-handleBucketPutEvent
            - Event: 's3:ObjectRemoved:Delete'
              Function: arn:aws:lambda:${{self:provider.region}}:${{self:custom.accountId}}:function:${{self:service}}-${{self:provider.stage}}-handleBucketDeleteEvent

    StoreBucketIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: StoreBucketIdentityPool
        AllowUnauthenticatedIdentities: false
        CognitoIdentityProviders:
          - ClientId: ${{ssm:/cuistot/app-client-id~true}}
            ProviderName: cognito-idp.${{self:provider.region}}.amazonaws.com/${{self:provider.environment.AWS_USERPOOL_ID}}

    AppSyncServiceRole:
      Type: "AWS::IAM::Role"
      DeletionPolicy : "Delete"
      Properties:
        RoleName: "Lambda-${{self:custom.appSync.serviceRole}}-${{self:provider.stage}}"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Principal:
                Service:
                  - "appsync.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          -
            PolicyName: "Lambda-${{self:custom.appSync.serviceRole}}-${{self:provider.stage}}-Policy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Action:
                    - "lambda:invokeFunction"
                  Resource:
                    - "arn:aws:lambda:${{self:custom.appSync.region}}:*:function:${{self:service}}-${{self:provider.stage}}-graphql"
                    - "arn:aws:lambda:${{self:custom.appSync.region}}:*:function:${{self:service}}-${{self:provider.stage}}-graphql:*"

    AppSyncLoggingServiceRole:
      Type: "AWS::IAM::Role"
      DeletionPolicy : "Delete"
      Properties:
        RoleName: "Logging-${{self:custom.appSync.serviceRole}}-${{self:provider.stage}}"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Principal:
                Service:
                  - "appsync.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          -
            PolicyName: "Logging-${{self:custom.appSync.serviceRole}}-${{self:provider.stage}}-Policy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Action:
                    - "logs:CreateLogGroup"
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                  Resource: "*"

    GraphqlLambdaRole:
      Type: "AWS::IAM::Role"
      DeletionPolicy: "Delete"
      Properties:
        RoleName: "${{self:service}}-${{self:provider.stage}}-graphql-lambdaRole"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Principal:
                Service:
                  - "lambda.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          -
            PolicyName: "${{self:service}}-${{self:provider.stage}}-graphql-lambdaRole-Policy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Action: "logs:CreateLogStream"
                  Resource: arn:aws:logs:${{self:provider.region}}:${{self:custom.accountId}}:log-group:/aws/lambda/${{self:service}}-${{self:provider.stage}}-graphql:*
                -
                  Effect: "Allow"
                  Action: "logs:PutLogEvents"
                  Resource: arn:aws:logs:${{self:provider.region}}:${{self:custom.accountId}}:log-group:/aws/lambda/${{self:service}}-${{self:provider.stage}}-graphql:*:*
                -
                  Effect: "Allow"
                  Action: "cognito-idp:AdminAddUserToGroup"
                  Resource: "arn:aws:cognito-idp:${{self:provider.region}}:${{self:custom.accountId}}:userpool/${{self:provider.environment.AWS_USERPOOL_ID}}"
                -
                  Effect: "Allow"
                  Action: "cognito-idp:AdminRemoveUserFromGroup"
                  Resource: "arn:aws:cognito-idp:${{self:provider.region}}:${{self:custom.accountId}}:userpool/${{self:provider.environment.AWS_USERPOOL_ID}}"

    PostConfirmationLambdaRole:
      Type: "AWS::IAM::Role"
      DeletionPolicy : "Delete"
      Properties:
        RoleName: "${{self:service}}-${{self:provider.stage}}-postConfirmation-lambdaRole"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Principal:
                Service:
                  - "lambda.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          -
            PolicyName: "${{self:service}}-${{self:provider.stage}}-postConfirmation-lambdaRole-Policy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Action: "logs:CreateLogStream"
                  Resource: arn:aws:logs:${{self:provider.region}}:${{self:custom.accountId}}:log-group:/aws/lambda/${{self:service}}-${{self:provider.stage}}-postConfirmation:*
                -
                  Effect: "Allow"
                  Action: "logs:PutLogEvents"
                  Resource: arn:aws:logs:${{self:provider.region}}:${{self:custom.accountId}}:log-group:/aws/lambda/${{self:service}}-${{self:provider.stage}}-postConfirmation:*:*
                -
                  Effect: "Allow"
                  Action: "cognito-idp:AdminAddUserToGroup"
                  Resource: "arn:aws:cognito-idp:${{self:provider.region}}:${{self:custom.accountId}}:userpool/${{self:provider.environment.AWS_USERPOOL_ID}}"
                -
                  Effect: "Allow"
                  Action: "SNS:Publish"
                  Resource: "arn:aws:sns:${{self:provider.region}}:${{self:custom.accountId}}:mailer"

    SendEmailLambdaRole:
      Type: "AWS::IAM::Role"
      DeletionPolicy : "Delete"
      Properties:
        RoleName: "${{self:service}}-${{self:provider.stage}}-sendEmail-lambdaRole"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Principal:
                Service:
                  - "lambda.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          -
            PolicyName: "${{self:service}}-${{self:provider.stage}}-sendEmail-lambdaRole-Policy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Action: "logs:CreateLogStream"
                  Resource: arn:aws:logs:${{self:provider.region}}:${{self:custom.accountId}}:log-group:/aws/lambda/${{self:service}}-${{self:provider.stage}}-sendEmail:*
                -
                  Effect: "Allow"
                  Action: "logs:PutLogEvents"
                  Resource: arn:aws:logs:${{self:provider.region}}:${{self:custom.accountId}}:log-group:/aws/lambda/${{self:service}}-${{self:provider.stage}}-sendEmail:*:*
                -
                  Effect: "Allow"
                  Action: "ses:SendRawEmail"
                  Resource: "*"

    HandleBucketPutEventLambdaRole:
      Type: "AWS::IAM::Role"
      DeletionPolicy : "Delete"
      Properties:
        RoleName: "${{self:service}}-${{self:provider.stage}}-handleBucketPutEvent-lambdaRole"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Principal:
                Service:
                  - "lambda.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          -
            PolicyName: "${{self:service}}-${{self:provider.stage}}-handleBucketPutEvent-lambdaRole-Policy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Action: "logs:CreateLogStream"
                  Resource: arn:aws:logs:${{self:provider.region}}:${{self:custom.accountId}}:log-group:/aws/lambda/${{self:service}}-${{self:provider.stage}}-handleBucketPutEvent:*
                -
                  Effect: "Allow"
                  Action: "logs:PutLogEvents"
                  Resource: arn:aws:logs:${{self:provider.region}}:${{self:custom.accountId}}:log-group:/aws/lambda/${{self:service}}-${{self:provider.stage}}-handleBucketPutEvent:*:*
                -
                  Effect: "Allow"
                  Action:
                    - "s3:GetObject"
                    - "s3:PutObject"
                    - "s3:DeleteObject"
                  Resource: arn:aws:s3:::${{self:provider.environment.AWS_STORE_BUCKET}}/*
                -
                  Effect: "Allow"
                  Action: "s3:ListBucket"
                  Resource: arn:aws:s3:::${{self:provider.environment.AWS_STORE_BUCKET}}

    HandleBucketDeleteEventLambdaRole:
      Type: "AWS::IAM::Role"
      DeletionPolicy : "Delete"
      Properties:
        RoleName: "${{self:service}}-${{self:provider.stage}}-handleBucketDeleteEvent-lambdaRole"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Principal:
                Service:
                  - "lambda.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          -
            PolicyName: "${{self:service}}-${{self:provider.stage}}-handleBucketDeleteEvent-lambdaRole-Policy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Action: "logs:CreateLogStream"
                  Resource: arn:aws:logs:${{self:provider.region}}:${{self:custom.accountId}}:log-group:/aws/lambda/${{self:service}}-${{self:provider.stage}}-handleBucketDeleteEvent:*
                -
                  Effect: "Allow"
                  Action: "logs:PutLogEvents"
                  Resource: arn:aws:logs:${{self:provider.region}}:${{self:custom.accountId}}:log-group:/aws/lambda/${{self:service}}-${{self:provider.stage}}-handleBucketDeleteEvent:*:*
                -
                  Effect: "Allow"
                  Action:
                    - "s3:DeleteObject"
                  Resource: arn:aws:s3:::${{self:provider.environment.AWS_STORE_BUCKET}}/*

    StoreBucketIdentityPoolRole:
      Type: "AWS::IAM::Role"
      DeletionPolicy : "Delete"
      Properties:
        RoleName: "${{self:service}}-${{self:provider.stage}}-storeBucket-identityPoolRole"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action: "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud": ${{ssm:/cuistot/identity-pool-id~true}}
                ForAnyValue:StringLike:
                  "cognito-identity.amazonaws.com:amr": "authenticated"
        Policies:
          -
            PolicyName: "${{self:service}}-${{self:provider.stage}}-storeBucket-identityPoolRole-Policy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: Allow
                  Action:
                    - s3:GetObject
                    - s3:PutObject
                    - s3:DeleteObject
                  Resource:
                    - arn:aws:s3:::${{self:provider.environment.AWS_STORE_BUCKET}}/*
                  Condition:
                    StringEquals:
                      "cognito-identity.amazonaws.com:sub":
                        - ${{ssm:/cuistot/admin-identity-id~true}}
                -
                  Effect: Allow
                  Action:
                    - s3:ListBucket
                  Resource:
                    - arn:aws:s3:::${{self:provider.environment.AWS_STORE_BUCKET}}
                  Condition:
                    StringEquals:
                      "cognito-identity.amazonaws.com:sub":
                        - ${{ssm:/cuistot/admin-identity-id~true}}
                -
                  Effect: Allow
                  Action:
                    - s3:GetObject
                    - s3:PutObject
                    - s3:DeleteObject
                  Resource:
                    - "arn:aws:s3:::${{self:provider.environment.AWS_STORE_BUCKET}}/public/*"
                    - "arn:aws:s3:::${{self:provider.environment.AWS_STORE_BUCKET}}/protected/${cognito-identity.amazonaws.com:sub}/*"
                    - "arn:aws:s3:::${{self:provider.environment.AWS_STORE_BUCKET}}/private/${cognito-identity.amazonaws.com:sub}/*"
                -
                  Effect: Allow
                  Action:
                    - s3:GetObject
                  Resource:
                    - "arn:aws:s3:::${{self:provider.environment.AWS_STORE_BUCKET}}/protected/*"
                -
                  Effect: Allow
                  Action:
                    - s3:ListBucket
                  Resource:
                    - "arn:aws:s3:::${{self:provider.environment.AWS_STORE_BUCKET}}"
                  Condition:
                    StringLike:
                      s3:prefix:
                        - public/
                        - protected/
                        - "private/${cognito-identity.amazonaws.com:sub}/"

    StoreBucketIdentityPoolRoleAttachment:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      DependsOn:
        - StoreBucketIdentityPool
      Properties:
        IdentityPoolId:
          Ref: StoreBucketIdentityPool
        Roles:
          authenticated:
            Fn::GetAtt:
              - StoreBucketIdentityPoolRole
              - Arn

    UserPoolTriggerPostConfirmationInvokePermission:
      Type: AWS::Lambda::Permission
      DependsOn:
        - PostConfirmationLambdaFunction
      Properties:
        Action: lambda:InvokeFunction
        Principal: cognito-idp.amazonaws.com
        SourceArn: arn:aws:cognito-idp:${{self:provider.region}}:${{self:custom.accountId}}:userpool/${{self:provider.environment.AWS_USERPOOL_ID}}
        FunctionName: arn:aws:lambda:${{self:provider.region}}:${{self:custom.accountId}}:function:${{self:service}}-${{self:provider.stage}}-postConfirmation
    StoreBucketHandlePutEventInvokePermission:
      Type: AWS::Lambda::Permission
      DependsOn:
        - HandleBucketPutEventLambdaFunction
      Properties:
        Action: lambda:InvokeFunction
        Principal: s3.amazonaws.com
        SourceArn: arn:aws:s3:::${{self:provider.environment.AWS_STORE_BUCKET}}
        FunctionName: arn:aws:lambda:${{self:provider.region}}:${{self:custom.accountId}}:function:${{self:service}}-${{self:provider.stage}}-handleBucketPutEvent
    StoreBucketHandleDeleteEventInvokePermission:
      Type: AWS::Lambda::Permission
      DependsOn:
        - HandleBucketDeleteEventLambdaFunction
      Properties:
        Action: lambda:InvokeFunction
        Principal: s3.amazonaws.com
        SourceArn: arn:aws:s3:::${{self:provider.environment.AWS_STORE_BUCKET}}
        FunctionName: arn:aws:lambda:${{self:provider.region}}:${{self:custom.accountId}}:function:${{self:service}}-${{self:provider.stage}}-handleBucketDeleteEvent

Outputs:
  IdentityPoolId:
    Value:
      Ref: StoreBucketIdentityPool