## https://gist.github.com/swalkinshaw/3a33e2d292b60e68fcebe12b62bbb3e2
## https://blog.apollographql.com/designing-graphql-mutations-e09de826ed97

interface Node {
  id: ID!
}

interface Timestamps {
  created_at: String!
  updated_at: String!
}

enum Gender {
  F
  M
  U
}

type Workshop implements Node & Timestamps {
  id: ID!
  created_at: String!
  updated_at: String!
  name: String!
  price: Int!
  duration: Int!
  min_gourmet: Int!
  max_gourmet: Int!
  description: String
  images: [S3Object!]!
  date: String!
  kitchen: Kitchen!
  cook: Cook!
  bookings: [Booking!]!
}

type Booking implements Node & Timestamps {
  id: ID!
  created_at: String!
  updated_at: String!
  amount: Int!
  gourmet: Gourmet!
  workshop: Workshop!
  evaluation: Evaluation
}

type Evaluation implements Timestamps {
  created_at: String!
  updated_at: String!
  booking: Booking!
  rating: Float!
  comment: String!
}

type Gourmet implements Node & Timestamps {
  id: ID!
  created_at: String!
  updated_at: String!
  email: String!
  first_name: String!
  last_name: String!
  image: S3Object
  gender: Gender
  birthdate: String
  address: String
  city: String
  zip_code: String
  location: String
  description: String
}

type Cook implements Node & Timestamps {
  id: ID!
  created_at: String!
  updated_at: String!
  is_pro: Boolean!
  business_name: String
  siren: String
  pro_email: String
  legal_first_name: String
  legal_last_name: String
  legal_birthdate: String
}

type Kitchen implements Node & Timestamps {
  id: ID!
  created_at: String!
  updated_at: String!
  name: String!
  address: String!
  city: String!
  zip_code: String!
  location: String!
}

type S3Object {
  bucket: String!
  key: String!
  region: String!
}

type WorkshopList {
  items: [Workshop!]!
  nextToken: String
}

input WorkshopInput {
  id: ID!
}

input KitchenInput {
  id: ID!
}

input CookInput {
  id: ID!
}

input GourmetInput {
  id: ID!
}

input BookingInput {
  id: ID!
}

input ImageInput {
  bucket: String!
  key: String!
  region: String!
}

type ImagePayload {
  image: S3Object
}

input CreateWorkshopInput {
  name: String!
  price: Int!
  duration: Int!
  min_gourmet: Int!
  max_gourmet: Int!
  description: String
  date: String!
  kitchen: KitchenInput!
  cook: CookInput!
}

input UpdateWorkshopInput {
  id: ID!
  name: String
  price: Int
  duration: Int
  min_gourmet: Int
  max_gourmet: Int
  description: String
  date: String
  kitchen: KitchenInput
  cook: CookInput
}

input CreateBookingInput {
  workshop: WorkshopInput!
  gourmet: GourmetInput!
  amount: Int
}

input UpdateBookingAmountInput {
  id: ID!
  amount: Int
}

input CreateEvaluationInput {
  booking: BookingInput!
  rating: Float!
  comment: String!
}

input CreateGourmetInput {
  email: String!
  first_name: String!
  last_name: String!
  gender: Gender
  birthdate: String
  address: String
  city: String
  zip_code: String
  location: String
  description: String
}

input UpdateGourmetInput {
  id: ID!
  email: String
  first_name: String
  last_name: String
  gender: Gender
  birthdate: String
  address: String
  city: String
  zip_code: String
  location: String
  description: String
}

input CreateCookInput {
  gourmet: GourmetInput!
  is_pro: Boolean
  business_name: String
  siren: String
  pro_email: String
  legal_first_name: String
  legal_last_name: String
  legal_birthdate: String
}

input UpdateCookInput {
  id: ID!
  is_pro: Boolean
  business_name: String
  siren: String
  pro_email: String
  legal_first_name: String
  legal_last_name: String
  legal_birthdate: String
}

input CreateKitchenInput {
  name: String!
  address: String!
  city: String!
  zip_code: String!
  location: String!
}

input UpdateKitchenInput {
  id: ID!
  name: String
  address: String
  city: String
  zip_code: String
  location: String
}

type UserError {
  message: String!
  field: [String!] ## Path to input field which caused the error
}

type UserErrorsPayload {
  userErrors: [UserError!]!
}

type WorkshopPayload {
  userErrors: [UserError!]!
  workshop: Workshop
}

type GourmetPayload {
  userErrors: [UserError!]!
  gourmet: Gourmet
}

type CookPayload {
  userErrors: [UserError!]!
  cook: Cook
}

type KitchenPayload {
  userErrors: [UserError!]!
  kitchen: Kitchen
}

type BookingPayload {
  userErrors: [UserError!]!
  booking: Booking
}

type EvaluationPayload {
  userErrors: [UserError!]!
  evaluation: Evaluation
}

type Mutation {
  ## Workshops
  createWorkshop(input: CreateWorkshopInput!): WorkshopPayload!
  updateWorkshop(input: UpdateWorkshopInput!): WorkshopPayload!
  deleteWorkshop(workshop_id: ID!): UserErrorsPayload!
  addWorkshopImage(input: ImageInput!): ImagePayload!
  removeWorkshopImage(key: String!): UserErrorsPayload!

  ## Bookings
  createBooking(input: CreateBookingInput!): BookingPayload!
  updateBookingAmount(input: UpdateBookingAmountInput!): BookingPayload!
  deleteBooking(booking_id: ID!): UserErrorsPayload!

  ## Evaluations
  createEvaluation(input: CreateEvaluationInput!): EvaluationPayload!

  ## Gourmets
  createGourmet(input: CreateGourmetInput!): GourmetPayload!
  updateGourmet(input: UpdateGourmetInput!): GourmetPayload!
  deleteGourmet(gourmet_id: ID!): UserErrorsPayload!
  updateGourmetImage(input: ImageInput!): ImagePayload!

  ## Cooks
  createCook(input: CreateCookInput!): CookPayload!
  updateCook(input: UpdateCookInput!): CookPayload!
  deleteCook(cook_id: ID!): UserErrorsPayload!

  ## Kitchens
  createKitchen(input: CreateKitchenInput!): KitchenPayload!
  updateKitchen(input: UpdateKitchenInput!): KitchenPayload!
  deleteKitchen(kitchen_id: ID!): UserErrorsPayload!
}

type Query {
  getWorkshop(workshop_id: ID!): WorkshopPayload!
  getWorkshops(limit: Int = 10, nextToken: String): WorkshopList!
  getGourmet(gourmet_id: ID!): GourmetPayload!
  getCook(cook_id: ID!): CookPayload!
  getBooking(booking_id: ID!): BookingPayload!
  getKitchen(kitchen_id: ID!): KitchenPayload!
  getEvaluation(booking_id: ID!): EvaluationPayload!
  getCurrentGourmet: GourmetPayload!
}

type Subscription {
  addWorkshop: WorkshopPayload!
    @aws_subscribe(mutations: ["createWorkshop"])
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
