type Mutation {
	# Create a workshop for a user
	# consumer keys and tokens are required for lambda integration
	createWorkshop(
		name: String!,
		price: Int!,
		duration: Int!,
		min_gourmet: Int!,
		max_gourmet: Int!,
		description: String!,
		Pictures: [String!]!,
		kitchen_id: String,
		workshop_date: String!,
	): Workshop!

	# Delete User Workshop
	deleteWorkshop(
	    workshop_id: String!,
    ): Workshop!

	# update functionality is not available in lambda integration
	updateWorkshop(
		name: String!,
		price: Int!,
		duration: Int!,
		min_gourmet: Int!,
		max_gourmet: Int!,
		description: String!,
		Pictures: [String!]!,
		kitchen_id: String,
		workshop_date: String!,
	): Workshop!

    # Create Gourmet info is not available in lambda integration
	updateGourmetInfo(
		first_name: String!
		last_name: String!
		phone: String
		birthday: String
		city: String!
		cp: Int
		location: String
		description: String
		picture: [String!]!
		gender: Int
	): Gourmet!
}

type Query {
	meInfo(consumer_key: String!, consumer_secret: String!): Gourmet!
	
}

type Workshop {
	workshop_id: String!
	name: String!
	price: Int!
	duration: Int!
	min_gourmet: Int!
	max_gourmet: Int!
	description: String!
	Pictures: [String!]!
	kitchen_id: String
	cook_id: String!
	workshop_date: String!
}

type WorkshopConnection {
	items: [Workshop!]!
	nextToken: String
}

type Gourmet {
	first_name: String!
	last_name: String!
	phone: String
	birthday: String
	city: String!
	cp: Int
	location: String
	description: String
	picture: [String!]!
	gender: Int
	handle: String!
}

type Cook {
	cook_id: String!
	is_pro: Boolean
  	description: String
  	business_name: String
  	siren: String
  	email_pro: String
}

type Kitchen {
	kitchen_id: String!
	name: String!
  	city: String
	cp: Int
	location: String
}

type Reservation {
	kitchen_id: String!
	workshop_id: String!
  	amount: Int
}

type Commentary {
	comment_id: String!
	rating: Int!
  	commentary: String
	cook_id: String
    workshop_id: String
}

schema {
	query: Query
	mutation: Mutation
}