## https://gist.github.com/swalkinshaw/3a33e2d292b60e68fcebe12b62bbb3e2
## https://blog.apollographql.com/designing-graphql-mutations-e09de826ed97

interface Node {
  id: ID!
}

interface Timestamps {
  created_at: String!
  updated_at: String!
  deleted_at: String
}

enum Gender {
  F
  M
  U
}

enum SortOrder {
  ASC
  DESC
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type PaginatedWorkshops {
  workshops: WorkshopConnection
  errors: [UserError!]!
  message: String
}

type PagePaginatedWorkshops {
  workshops: WorkshopPage
  errors: [UserError!]!
  message: String
}

type PagePaginatedGourmets {
  gourmets: GourmetPage
  errors: [UserError!]!
  message: String
}

type PagePaginatedCooks {
  cooks: CookPage
  errors: [UserError!]!
  message: String
}

type PagePaginatedBookings {
  bookings: BookingPage
  errors: [UserError!]!
  message: String
}

type PaginatedKitchens {
  kitchens: KitchenConnection
  errors: [UserError!]!
  message: String
}

type PagePaginatedKitchens {
  kitchens: KitchenPage
  errors: [UserError!]!
  message: String
}

type PagePaginatedEvaluations {
  evaluations: EvaluationPage
  errors: [UserError!]!
  message: String
}

type WorkshopConnection {
  edges: [WorkshopEdge!]!
  pageInfo: PageInfo!
}

type WorkshopPage {
  items: [Workshop!]!
  total: Int!
}

type GourmetPage {
  items: [Gourmet!]!
  total: Int!
}

type CookPage {
  items: [Cook!]!
  total: Int!
}

type BookingPage {
  items: [Booking!]!
  total: Int!
}

type KitchenConnection {
  edges: [KitchenEdge!]!
  pageInfo: PageInfo!
}

type KitchenPage {
  items: [Kitchen!]!
  total: Int!
}

type EvaluationPage {
  items: [Evaluation!]!
  total: Int!
}

type WorkshopEdge {
  node: Workshop!
  cursor: String!
}

type KitchenEdge {
  node: Kitchen!
  cursor: String!
}

type Workshop implements Node & Timestamps {
  id: ID!
  created_at: String!
  updated_at: String!
  deleted_at: String
  confirmed: Boolean!
  name: String!
  price: Int!
  duration: Int!
  min_gourmet: Int!
  max_gourmet: Int!
  description: String
  images: [Image!]!
  date: String!
  kitchen: Kitchen!
  cook: Cook!
  bookings: [Booking!]!
}

type Booking implements Node & Timestamps {
  id: ID!
  created_at: String!
  updated_at: String!
  deleted_at: String
  amount: Int!
  gourmet: Gourmet!
  workshop: Workshop!
}

type Evaluation implements Timestamps {
  id: ID!
  created_at: String!
  updated_at: String!
  deleted_at: String
  rating: Float!
  comment: String!
  cook: Cook!
  author: Gourmet!
}

type Gourmet implements Node & Timestamps {
  id: ID!
  created_at: String!
  updated_at: String!
  deleted_at: String
  email: String!
  phone_number: String
  identity_id: String
  username: String!
  first_name: String!
  last_name: String!
  image: Image
  gender: Gender
  birthdate: String
  address: String
  city: String
  zip_code: String
  location: String
  description: String
  bookings: [Booking!]!
}

type Cook implements Node & Timestamps {
  id: ID!
  created_at: String!
  updated_at: String!
  deleted_at: String
  gourmet: Gourmet!
  description: String
  is_pro: Boolean!
  confirmed: Boolean!
  business_name: String
  siren: String
  pro_email: String
  pro_phone_number: String!
  legal_first_name: String
  legal_last_name: String
  legal_birthdate: String
  image: Image
  workshops: [Workshop!]!
  evaluations: [Evaluation!]!
}

type Kitchen implements Node & Timestamps {
  id: ID!
  created_at: String!
  updated_at: String!
  deleted_at: String
  name: String!
  address: String!
  city: String!
  zip_code: String!
  location: String!
  author: Gourmet!
}

type Image {
  key: String!
}

type WorkshopList {
  items: [Workshop!]!
  nextToken: String
}

input WorkshopInput {
  id: ID!
}

input KitchenInput {
  id: ID!
}

input CookInput {
  id: ID!
}

input GourmetInput {
  id: ID!
}

input BookingInput {
  id: ID!
}

input EvaluationInput {
  id: ID!
}

input CreateWorkshopInput {
  name: String!
  price: Int!
  duration: Int!
  min_gourmet: Int!
  max_gourmet: Int!
  description: String
  date: String!
  kitchen: KitchenInput!
  cook: CookInput!
}

input UpdateWorkshopInput {
  id: ID!
  name: String
  price: Int
  duration: Int
  min_gourmet: Int
  max_gourmet: Int
  description: String
  date: String
  kitchen: KitchenInput
  cook: CookInput
}

input CreateBookingInput {
  workshop: WorkshopInput!
  gourmet: GourmetInput!
  amount: Int
}

input UpdateBookingInput {
  id: ID!
  amount: Int
}

input CreateEvaluationInput {
  cook: CookInput!
  rating: Float!
  comment: String!
}

input UpdateEvaluationInput {
  id: ID!
  rating: Float
  comment: String
}

input CreateGourmetInput {
  id: ID!
  email: String!
  phone_number: String
  first_name: String!
  last_name: String!
  gender: Gender
  birthdate: String
  address: String
  city: String
  zip_code: String
  description: String
}

input UpdateGourmetInput {
  id: ID!
  phone_number: String
  description: String
  gender: Gender
  first_name: String
  last_name: String
  birthdate: String
  address: String
  city: String
  zip_code: String
  identity_id: String
}

input CreateCookInput {
  gourmet: GourmetInput!
  is_pro: Boolean
  description: String
  business_name: String
  siren: String
  pro_email: String
  pro_phone_number: String!
  legal_first_name: String
  legal_last_name: String
  legal_birthdate: String
}

input UpdateCookInput {
  id: ID!
  is_pro: Boolean
  description: String
  business_name: String
  siren: String
  pro_email: String
  pro_phone_number: String
  legal_first_name: String
  legal_last_name: String
  legal_birthdate: String
}

input CreateKitchenInput {
  name: String
  address: String!
  city: String!
  zip_code: String!
}

input UpdateKitchenInput {
  id: ID!
  name: String
  address: String
  city: String
  zip_code: String
}

type UserError {
  message: String!
  field: [String!] ## Path to input field which caused the error
}

type PlainPayload {
  errors: [UserError!]!
  message: String
}

type WorkshopPayload {
  errors: [UserError!]!
  message: String
  workshop: Workshop
}

type GourmetPayload {
  errors: [UserError!]!
  message: String
  gourmet: Gourmet
}

type CookPayload {
  errors: [UserError!]!
  message: String
  cook: Cook
}

type KitchenPayload {
  errors: [UserError!]!
  message: String
  kitchen: Kitchen
}

type BookingPayload {
  errors: [UserError!]!
  message: String
  booking: Booking
}

type EvaluationPayload {
  errors: [UserError!]!
  message: String
  evaluation: Evaluation
}

input Filter {
  ids: [ID!]
  q: String
  has_been_deleted: Boolean
}

input WorkshopFilter {
  ids: [ID!]
  q: String
  has_bookings: Boolean
  has_been_archived: Boolean
  has_been_deleted: Boolean
}

input Order {
  field: String!
  order: SortOrder!
}

type Mutation {
  ## Workshops
  createWorkshop(workshop: CreateWorkshopInput!): WorkshopPayload!
    @aws_auth(cognito_groups: ["Cook", "Admin"])
  updateWorkshop(workshop: UpdateWorkshopInput!): WorkshopPayload!
    @aws_auth(cognito_groups: ["Cook", "Admin"])
  deleteWorkshop(workshop_id: ID!): PlainPayload!
    @aws_auth(cognito_groups: ["Cook", "Admin"])
  confirmWorkshop(workshop: WorkshopInput!): PlainPayload!
    @aws_auth(cognito_groups: ["Admin"])
  recreateWorkshop(workshop: WorkshopInput!): PlainPayload!
    @aws_auth(cognito_groups: ["Admin"])

  ## Bookings
  createBooking(booking: CreateBookingInput!): BookingPayload!
    @aws_auth(cognito_groups: ["Gourmet", "Admin"])
  updateBooking(booking: UpdateBookingInput!): BookingPayload!
    @aws_auth(cognito_groups: ["Gourmet", "Admin"])
  deleteBooking(booking_id: ID!): PlainPayload!
    @aws_auth(cognito_groups: ["Gourmet", "Admin"])
  recreateBooking(booking: BookingInput!): PlainPayload!
    @aws_auth(cognito_groups: ["Admin"])

  ## Evaluations
  createEvaluation(evaluation: CreateEvaluationInput!): EvaluationPayload!
    @aws_auth(cognito_groups: ["Gourmet", "Admin"])
  updateEvaluation(evaluation: UpdateEvaluationInput!): EvaluationPayload!
    @aws_auth(cognito_groups: ["Gourmet", "Admin"])
  deleteEvaluation(evaluation_id: ID!): PlainPayload!
    @aws_auth(cognito_groups: ["Gourmet", "Admin"])
  recreateEvaluation(evaluation: EvaluationInput!): PlainPayload!
    @aws_auth(cognito_groups: ["Admin"])

  ## Gourmets
  createGourmet(gourmet: CreateGourmetInput!): GourmetPayload!
    @aws_auth(cognito_groups: ["Admin"]) # also called by user pool post confirmation trigger
  updateGourmet(gourmet: UpdateGourmetInput!): GourmetPayload!
    @aws_auth(cognito_groups: ["Gourmet", "Admin"])
  deleteGourmet(gourmet_id: ID!): PlainPayload!
    @aws_auth(cognito_groups: ["Gourmet", "Admin"])
  recreateGourmet(gourmet: GourmetInput!): PlainPayload!
    @aws_auth(cognito_groups: ["Admin"])

  ## Cooks
  createCook(cook: CreateCookInput!): CookPayload!
    @aws_auth(cognito_groups: ["Gourmet", "Admin"])
  updateCook(cook: UpdateCookInput!): CookPayload!
    @aws_auth(cognito_groups: ["Cook", "Admin"])
  confirmCook(cook: CookInput!): PlainPayload!
    @aws_auth(cognito_groups: ["Admin"])
  deleteCook(cook_id: ID!): PlainPayload!
    @aws_auth(cognito_groups: ["Cook", "Admin"])
  recreateCook(cook: CookInput!): PlainPayload!
    @aws_auth(cognito_groups: ["Admin"])

  ## Kitchens
  createKitchen(kitchen: CreateKitchenInput!): KitchenPayload!
    @aws_auth(cognito_groups: ["Cook", "Admin"])
  updateKitchen(kitchen: UpdateKitchenInput!): KitchenPayload!
    @aws_auth(cognito_groups: ["Cook", "Admin"])
  deleteKitchen(kitchen_id: ID!): PlainPayload!
    @aws_auth(cognito_groups: ["Cook", "Admin"])
  recreateKitchen(kitchen: KitchenInput!): PlainPayload!
    @aws_auth(cognito_groups: ["Admin"])
}

type Query {
  getWorkshop(workshop_id: ID!): WorkshopPayload!
  getWorkshops(before: String, after: String, first: Int, last: Int): PaginatedWorkshops!
  getWorkshopsPage(limit: Int, page: Int, filter: WorkshopFilter, orderBy: Order): PagePaginatedWorkshops!
    @aws_auth(cognito_groups: ["Admin"])
  getGourmet(gourmet_id: ID!): GourmetPayload!
  getGourmetsPage(limit: Int, page: Int, filter: Filter, orderBy: Order): PagePaginatedGourmets!
    @aws_auth(cognito_groups: ["Admin"])
  getCook(cook_id: ID!): CookPayload!
  getCooksPage(limit: Int, page: Int, filter: Filter, orderBy: Order): PagePaginatedCooks!
    @aws_auth(cognito_groups: ["Admin"])
  getBooking(booking_id: ID!): BookingPayload!
    @aws_auth(cognito_groups: ["Gourmet", "Admin"])
  getBookingsPage(limit: Int, page: Int, filter: Filter, orderBy: Order): PagePaginatedBookings!
    @aws_auth(cognito_groups: ["Admin"])
  getKitchen(kitchen_id: ID!): KitchenPayload!
  getKitchens(before: String, after: String, first: Int, last: Int): PaginatedKitchens!
  getKitchensPage(limit: Int, page: Int, filter: Filter, orderBy: Order): PagePaginatedKitchens!
    @aws_auth(cognito_groups: ["Admin"])
  getEvaluation(evaluation_id: ID!): EvaluationPayload!
  getEvaluationsPage(limit: Int, page: Int, filter: Filter, orderBy: Order): PagePaginatedEvaluations!
    @aws_auth(cognito_groups: ["Admin"])
  getCurrentGourmet: GourmetPayload!
    @aws_auth(cognito_groups: ["Gourmet", "Admin"])
}

type Subscription {
  addWorkshop: WorkshopPayload!
    @aws_subscribe(mutations: ["createWorkshop"])
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
