type Mutation {
	createWorkshop(
		name: String!,
		price: Int!,
		duration: Int!,
		min_gourmet: Int!,
		max_gourmet: Int!,
		description: String!,
		kitchen_id: ID,
		workshop_date: String!,
		comments: [CommentInput],
	): Workshop!

	deleteWorkshop(
	    workshop_id: ID!,
    ): Workshop!

	updateWorkshop(
		name: String!,
		price: Int!,
		duration: Int!,
		min_gourmet: Int!,
		max_gourmet: Int!,
		description: String!,
		kitchen_id: ID,
		workshop_date: String!,
		comments: [CommentInput],
	): Workshop!

	createGourmet(
		first_name: String!,
		last_name: String!,
		phone: String,
		birthday: String,
		city: String!,
		cp: Int,
		location: String,
		description: String,
		gender: Int,
	): Workshop!

	deleteGourmet(
	    gourmet_id: ID!,
    ): Workshop!

	updateGourmet(
		first_name: String!,
		last_name: String!,
		phone: String,
		birthday: String,
		city: String!,
		cp: Int,
		location: String,
		description: String,
		gender: Int,
	): Gourmet!

	createCook(
		is_pro: Boolean,
		description: String,
		business_name: String,
		siren: String,
		email_pro: String,
	): Cook!

	deleteCook(
		cook_id: ID!,
	): Cook!

	updateCook(
		is_pro: Boolean,
		description: String,
		business_name: String,
		siren: String,
		email_pro: String,
	): Cook!
	
	createKitchen(
		name: String!,
		city: String,
		cp: Int,
		location: String,
	): Kitchen!

	deleteKitchen(
		kitchen_id: ID!,
	): Cook!

	updateKitchen(
		name: String!,
		city: String,
		cp: Int,
		location: String,
	): Kitchen!

	createReservation(
		amount: Int,
	): Reservation!

	deleteReservation(
		kitchen_id: ID!,
	): Reservation!

	updateReservation(
		amount: Int,
	): Reservation!
}

type Query {
	meInfo(gourmet_id: ID): Gourmet!
	getWorkshop(workshop_id: ID): Workshop!
	getGourmet(gourmet_id: ID): Gourmet!
	getCook(cook_id: ID): Cook!
	getKitchen(kitchen_id: ID): Kitchen!
	getReservation(reservation_id: ID): Reservation!
}

type Subscription {
	subWorkshop: Workshop
		@aws_subscribe(mutations: ["createWorkshop"])
}

input CommentInput {
	gourmet_id: ID!
	rating: Int!
  	comment: String
}

type Comment {
	gourmet_id: ID!
	rating: Int!
  	comment: String
}

type CommentList {
	items: [Comment]
	nextToken: String
}

type Workshop {
	workshop_id: ID!
	name: String!
	price: Int!
	duration: Int!
	min_gourmet: Int!
	max_gourmet: Int!
	description: String!
	pictures: [S3Object!]!
	kitchen_id: ID
	cook_id: ID!
	workshop_date: String!
	comments(limit: Int!, nextToken: String): CommentList
}

type WorkshopList {
	items: [Workshop!]!
	nextToken: String
}

type Gourmet {
	first_name: String!
	last_name: String!
	phone: String
	birthday: String
	city: String!
	cp: Int
	location: String
	description: String
	picture: [S3Object!]!
	gender: Int
	handle: String!
}

type Cook {
	cook_id: ID!
	is_pro: Boolean
  	description: String
  	business_name: String
  	siren: String
  	email_pro: String
}

type Kitchen {
	kitchen_id: ID!
	name: String!
  	city: String
	cp: Int
	location: String
}

type Reservation {
	kitchen_id: ID!
	workshop_id: ID!
  	amount: Int
}

type S3Object {
  	bucket: String!
  	key: String!
  	region: String!
}

schema {
	query: Query
	mutation: Mutation
	subscription: Subscription
}